'''
import libraries
'''
from mpi4py import MPI
import json
import sys


def get_FileName(argv):
    if len(argv) > 1:
        return argv[1]
    else:
        return "bigTwitter.json"


# load the grid data, specifically the coordinates of vetices
# of each grid box
def get_Grid(gridFile):
    with open(gridFile, 'r') as melbGrid:
        gridData = json.load(melbGrid)
        grid = []
        for box in gridData["features"]:
            grid.append(box["properties"])
    return grid


# count the total number of data records in a json lines file
def count_lines(tweet_file):
    count = 0
    for line in tweet_file:
        count += 1
    return count


def data_partition(comm, data_file, file_lines):
    pass


def master_process(comm, grid, argv):
    with open(argv[1], 'r') as data_File:
        file_lines = count_lines(data_File)
        data_partition(comm, grid, data_File, file_lines)


def order_num_tweets():
    pass


def order_hashtags():
    pass


# Decide which grid box a given point with its x, y coordinates belongs to
def which_grid_box(cor_x, cor_y, grid):
    for box in grid:
        if cor_x >= box["xmin"] and cor_x <= box["xmax"] \
         and cor_y >= box["ymin"] and cor_y <= box["ymin"]:
            area = box["id"]
    return area


def process_tweet(comm, grid, tweet_file):
    grid_dict = {}  # {"A1": num_tweets, "A2": num_tweets}
    grid_hashtag_dict = {}
    with open(tweet_file, 'r') as f:
        tweet = json.load(f)
        row_indicator = 0
        for row in tweet["rows"]:
            recipient = row_indicator % comm.Get_size
            recvBuf = comm.sendrecv(row, dest=recipient)
            row_indicator += 1
            temp_cor_list = recvBuf["value"]["geometry"]["coordinates"]
            area = which_grid_box(temp_cor_list[0], temp_cor_list[1])

            if area not in grid_dict.keys():
                grid_dict[area] = 1
            else:
                grid_dict[area] += 1
            # code for find hashtag
            # ...
        grid_dict = comm.gather(grid_dict, root=0)
    return grid_dict, grid_hashtag_dict


def main(argv):
    comm = MPI.COMM_WORLD
    # Get rank of process
    rank = comm.Get_rank()
    processes = comm.Get_size()
    grid = get_Grid(argv[0])  # suppose argv == "melbGrid.json"

    grid_dict = None  # [{"A1":23, "B1":34},{}]
    grid_hashtag_dict = None

    if processes < 2:
        # to be continue
        pass
    else:
        grid_dict, grid_hashtag_dict = process_tweet(comm, grid, argv[1])
    if rank == 0:
        new_grid_dict = {}
        for entry in grid_dict:
            for k, v in entry.items():
                if k not in new_grid_dict:
                    new_grid_dict[k] = v
                else:
                    new_grid_dict[k] += v


if __name__ == "__main__":
    main(sys.argv)
